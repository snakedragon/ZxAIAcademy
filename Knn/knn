# -*- coding:utf-8 -*-
from numpy import *
import operator
import matplotlib
import matplotlib.pyplot as plt


# 创建数据集合
def createDataSet():
    group = array([[1.0, 1.1], [1.0, 1.0], [0, 0], [0, 0.1]])
    labels = ['A', 'A', 'B', 'B']
    return group, labels


# kNN分类
def classify0(inX, dataSet, labels, k):
    dataSetSize = dataSet.shape[0]
    diffMat = tile(inX, (dataSetSize, 1)) - dataSet
    sqDiffMat = diffMat ** 2
    sqDistance = sqDiffMat.sum(axis=1)
    distances = sqDistance ** 0.5

    sortedDistIndicies = distances.argsort()

    classCount = {}
    for i in range(k):
        voteIlabel = labels[sortedDistIndicies[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1

    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
    return sortedClassCount

def file2matrix(filename):
    fr = open(filename)
    numberOfLines = len(fr.readlines())         #get the number of lines in the file
    returnMat = zeros((numberOfLines,3))        #prepare matrix to return
    classLabelVector = []                       #prepare labels return
    fr = open(filename)
    index = 0
    for line in fr.readlines():
        line = line.strip()
        listFromLine = line.split('\t')
        returnMat[index,:] = listFromLine[0:3]
        classLabelVector.append(int(listFromLine[-1]))
        index += 1
    return returnMat,classLabelVector

# 数据归一化
def autoNorm(dataSet):
    minVals = dataSet.min(0)  # 每列最小值
    maxVals = dataSet.max(0)  # 每列最大值
    ranges = maxVals - minVals
    normDataSet = zeros(shape(dataSet))  # 初始化归一化后的数据为0矩阵
    m = dataSet.shape[0]
    normDataSet = dataSet - tile(minVals, (m, 1))  # 将所有数据与最小值相减
    normDataSet = normDataSet / tile(ranges, (m, 1))  # 再除以最大和最小值之差。注意 ／代表矩阵中每个对应的数字相除
    return normDataSet, ranges, minVals


# 数据可视化
def plot_data(filename='datingTestSet2.txt'):
    Datas, Labels = file2matrix(filename)
    fig = plt.figure()

    ax = fig.add_subplot(211)
    ax.scatter(Datas[:, 0], Datas[:, 1], 15.0 * array(Labels), 15.0 * array(Labels))
    ax.axis([-2000, 100000, -2, 25])
    plt.xlabel('Frequent Flyier Miles Earned Per Year')
    plt.ylabel('Percentage of Time Spent Playing Video Games')

    ay = fig.add_subplot(212)
    ay.scatter(Datas[:, 1], Datas[:, 2], 15.0 * array(Labels), 15.0 * array(Labels))
    ay.axis([-2, 25, -0.2, 2.0])
    plt.xlabel('Percentage of Time Spent Playing Video Games')
    plt.ylabel('Liters of Ice Cream Consumed Per Week')
    plt.show()


# 测试分类错误率
def datingClassTest():
    hoRatio = 0.10  # 用样本中的多少来做测试hold out 10%可以修改
    datingDataMat, datingLabels = file2matrix('datingTestSet2.txt')  # load data setfrom file
    normMat, ranges, minVals = autoNorm(datingDataMat)
    m = normMat.shape[0]
    numTestVecs = int(m * hoRatio)  # 计算测试数据的数目
    errorCount = 0.0  # 初始化错误率
    # 一个个数据去做测试
    for i in range(numTestVecs):
        classifierResult = classify0(normMat[i, :], normMat[numTestVecs:m, :], datingLabels[numTestVecs:m], 3)
        # print ("the classifier came back with: %d, the real answer is: %d" %(classifierResult, datingLabels[i]))
        if (classifierResult[0][0] != datingLabels[i]): errorCount += 1.0
    print ("the total error rate is: %f" % (errorCount / float(numTestVecs)))
    print (errorCount)


# 约会对象测
def classifyPerson():
    resultList = ['not at all', 'in small dose', 'in large dose']
    percentTats = float(raw_input("percentage of time spent playing video games?"))
    ffMiles = float(raw_input("frequent flier miles earned per year?"))
    iceCream = float(raw_input("liters of ice cream consumed per year?"))
    inArr = array([ffMiles, percentTats, iceCream])

    datingDataMat, datingLabels = file2matrix('datingTestSet2.txt')
    normMat, ranges, minVals = autoNorm(datingDataMat)
    classifierResult = classify0((inArr - minVals) / ranges, normMat, datingLabels, 3)
    # print (classifierResult)
    print "You will probably like this person: ", resultList[classifierResult[0][0] - 1]


if __name__ == '__main__':
    datingClassTest()